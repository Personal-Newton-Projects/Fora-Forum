@page "/forum/{InterestName}/{ThreadId:int}"

@inject IThreadManager ThreadManager
@inject IJSRuntime JsRuntime
@inject ILoginManager LoginManager
@inject NavigationManager NavigationManager


@if (HasPageLoaded)
{

    <div class="container-fluid">
        <div class="row">
            <div class="col-md-2">
            </div>
            <div class="col-md-8">
                <h2>@ThisThread.Name</h2>
                @foreach (MessageModel message in ThisThread.Messages)
                {
                    <div class="media border">
                        <a href="profile/@message.User.Id">
                            <h5 class="mt-0">@message.User.Username</h5>
                        </a>
                        <img src="..." class="mr-3" alt="Profile Picture">
                        <div class="media-body">
                            @message.Message
                        </div>
                        @if (CurrentUser.Id == message.User.Id)
                        {
                            <div class="d-flex justify-content-end">
                                <button class="btn btn-link" @onclick="@(() => EditMessage(message))">Edit</button>
                                <button class="btn btn-link" @onclick="@(() => RemoveMessage(message))">Remove</button>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="col-md-2">
            </div>
        </div>
    </div>


    <button @onclick="StartPost" class="btn btn-primary">Post</button>
    if (UserPosting)
    {
        <EditForm Model="@PostMessage" OnValidSubmit="PostMessageToThread">
            <InputTextArea @bind-Value="PostMessage.Message">

            </InputTextArea>

            <button class="btn btn-success" type="submit">Post Message</button>
        </EditForm>
    }

}


@code {

    [Parameter]
    public string InterestName { get; set; }
    [Parameter]
    public int ThreadId { get; set; }
    [Parameter]
    public PostMessageModel PostMessage { get; set; } = new PostMessageModel();
    [Parameter]
    public UserModel CurrentUser { get; set; }

    ThreadModel ThisThread { get; set; } = new ThreadModel();
    UserModel ThreadCreator { get; set; }

    public bool HasPageLoaded { get; set; } = false;

    public bool UserPosting { get; set; }



    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        ThisThread = await ThreadManager.GetThread(ThreadId);
        ThreadCreator = ThisThread.User;
        HasPageLoaded = true;

        StateHasChanged();
    }

    void Reload()
    {
        StateHasChanged();
        Console.WriteLine("Reload");
    }

    async Task StartPost()
    {
        UserPosting = true;
        StateHasChanged();
    }

    async Task PostMessageToThread()
    {
        PostMessage.PosterId = CurrentUser.Id;
        PostMessage.ThreadId = ThisThread.Id;
        await ThreadManager.PutMessage(PostMessage);
        UserPosting = false;
        ThisThread = await ThreadManager.GetThread(ThreadId);
        StateHasChanged();
    }

    async Task EditMessage(MessageModel message)
    {
        await ThreadManager.UpdateMessage(
            new UpdateMessageModel()
                {
                    MessageId = message.Id,
                    ThreadId = message.ThreadId,
                    NewMessage = message.Message,
                });
    }

    async Task RemoveMessage(MessageModel message)
    {
        await ThreadManager.UpdateMessage(
            new UpdateMessageModel()
                {
                    MessageId = message.Id,
                    ThreadId = message.ThreadId,
                    NewMessage = "This post has been removed."
                }
        );
        
    }

}
