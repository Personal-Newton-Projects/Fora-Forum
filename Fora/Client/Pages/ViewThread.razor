@page "/forum/{InterestName}/{ThreadId:int}"

@inject IThreadManager ThreadManager
@inject IJSRuntime JsRuntime
@inject ILoginManager LoginManager


@if (HasPageLoaded)
{
    <h4>@ThisThread.Name</h4>
        @foreach (MessageModel message in ThisThread.Messages)
        {
            <div class="border">
                            <p>@message.Message</p>
            <p>Posted By: <a href="profile/@message.User.Id">@message.User.Username</a></p>
            </div>

        }

    <button @onclick="StartPost" class="btn btn-primary">Post</button>
    if(UserPosting)
    {
            <EditForm Model="@PostMessage" OnValidSubmit="PostMessageToThread">
                <InputTextArea @bind-Value="PostMessage.Message">

                </InputTextArea>

                <button class="btn btn-success" type="submit">Post Message</button>
            </EditForm>
    }

}


@code {

    [Parameter]
    public string InterestName { get; set; }
    [Parameter]
    public int ThreadId { get; set; }
    [Parameter]
    public PostMessageModel PostMessage { get; set; } = new PostMessageModel();
    [Parameter]
    public UserModel CurrentUser { get; set; }

    ThreadModel ThisThread { get; set; } = new ThreadModel();

    public bool HasPageLoaded { get; set; } = false;

    public bool UserPosting { get; set; }



    protected override async Task OnInitializedAsync()
    {
        if(CurrentUser == null)
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        ThisThread = await ThreadManager.GetThread(ThreadId);
        HasPageLoaded = true;
        StateHasChanged();
    }

    void Reload()
    {
        StateHasChanged();
        Console.WriteLine("Reload");
    }

    void StartPost()
    {
        UserPosting = true;
        StateHasChanged();
    }

    void PostMessageToThread()
    {
        PostMessage.PosterId = CurrentUser.Id;
        PostMessage.ThreadId = ThisThread.Id;
        ThreadManager.PutMessage(PostMessage);
        UserPosting = false;
        StateHasChanged();
    }
}
