@page "/forum/{InterestName}/post"

@inject ILoginManager LoginManager
@inject IInterestManager InterestManager
@inject IThreadManager ThreadManager
@inject NavigationManager NavigationManager

@if (HasPageLoaded == true)
{
    @if(CurrentUser != null)
    {
            <EditForm Model="@ThreadtoCreate" class="form-group" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText class="form-control" @bind-Value="@ThreadtoCreate.Title">

        </InputText>
        <InputTextArea class="form-control" @bind-Value="@ThreadtoCreate.Description">

        </InputTextArea>

        <button class="btn btn-success" type="submit">Create Thread</button>

        </EditForm>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
  Please log in to post a thread.
</div>
    }

}


@code {
    [Parameter]
    public string InterestName { get; set; }

    InterestModel Interest { get; set; }

    PostThreadModel ThreadtoCreate { get; set; } = new PostThreadModel();

    UserModel CurrentUser { get; set; }

    public bool HasPageLoaded { get; set; } = false;

    //public ThreadModel ThreadtoCreate { get; set; } = new ThreadModel();

    protected override void OnInitialized()
    {

        HasPageLoaded = true;
        StateHasChanged();

    }

    async Task HandleSubmit()
    {

        var interestResult = await InterestManager.GetInterests();
        Interest = interestResult.Where(i => i.Name.ToLower() == InterestName.ToLower()).FirstOrDefault();


        if (await LoginManager.IsLoggedIn())
        {
            CurrentUser = await LoginManager.GetLoggedInUser();

            ThreadtoCreate.CreatorId = CurrentUser.Id;
            ThreadtoCreate.InterestId = Interest.Id;

            await ThreadManager.PostThread(ThreadtoCreate);
            var lastThread = await ThreadManager.GetThreads();
            NavigationManager.NavigateTo(NavigationManager.BaseUri + $"/forum/{InterestName}/{lastThread.Last().Id}", forceLoad: true);
        }
    }
}



