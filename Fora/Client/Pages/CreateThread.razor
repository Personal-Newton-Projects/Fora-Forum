@page "/forum/{InterestName}/post"

@inject ILoginManager LoginManager
@inject IInterestManager InterestManager
@inject IThreadManager ThreadManager

@if (HasPageLoaded == true)
{
    <EditForm Model="@ThreadtoCreate" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText class="form-control" @bind-Value="@ThreadtoCreate.Title">

        </InputText>
        <InputTextArea class="form-control" @bind-Value="@ThreadtoCreate.Description">

        </InputTextArea>

        <button class="btn btn-success" type="submit">Create Thread</button>

    </EditForm>
}


@code {
    [Parameter]
    public string InterestName { get; set; }

    InterestModel Interest { get; set; }

    class CreateThreadModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
    }

    CreateThreadModel ThreadtoCreate { get; set; } = new CreateThreadModel();

    public bool HasPageLoaded { get; set; } = false;

    //public ThreadModel ThreadtoCreate { get; set; } = new ThreadModel();

    protected override void OnInitialized()
    {

        HasPageLoaded = true;
        StateHasChanged();

    }

    async Task HandleSubmit()
    {

        var interestResult = await InterestManager.GetInterests();
        Interest = interestResult.Where(i => i.Name.ToLower() == InterestName.ToLower()).FirstOrDefault();


        if (await LoginManager.IsLoggedIn())
        {
            UserModel currentUser = await LoginManager.GetLoggedInUser();
            ThreadModel thread = new ThreadModel()
                {
                    Messages = new List<MessageModel>()
                    {
                        new MessageModel()
                        {
                            Message = ThreadtoCreate.Description
                        }
                    },
                    Name = ThreadtoCreate.Title,
                    User = currentUser,
                    UserId = currentUser.Id,
                    Interest = Interest,
                    InterestId = Interest.Id,
                };

                thread.Interest.Threads.Add(thread);

                await ThreadManager.PostThread(thread);
        }

        //ThreadtoCreate.User = await LoginManager.GetLoggedInUser();

        //ThreadtoCreate.Interest = Interest;
        //if (ThreadtoCreate.User.Messages == null)
        //{
        //    ThreadtoCreate.User.Messages = new List<MessageModel>();
        //}

        //ThreadtoCreate.User.Messages.Add(ThreadtoCreate.Messages[0]);
        //if (ThreadtoCreate.User.Threads == null)
        //{
        //    ThreadtoCreate.User.Threads = new List<ThreadModel>();
        //}
        //ThreadtoCreate.User.Threads.Add(ThreadtoCreate);


        
    }
    }


}
