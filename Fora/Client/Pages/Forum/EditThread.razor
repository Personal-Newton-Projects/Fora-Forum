@page "/forum/{InterestName}/{ThreadId:int}/edit"

@inject ILoginManager LoginManager
@inject IInterestManager InterestManager
@inject IThreadManager ThreadManager
@inject NavigationManager NavigationManager

@if (HasPageLoaded == true)
{
    @if (CurrentThread != null)
    {
        @if (CurrentUser != null)
        {
            @if (CurrentUser.Id == CurrentThread.UserId || CurrentUser.UserRole.Role.Role == RoleEnum.ADMIN)
            {
                @if(!CurrentUser.Deleted)
                {
                    if(!CurrentUser.Banned)
                    {
                       <div class="container">
                    <div class="row">
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-8">
                            <EditForm Model="@ThreadUpdate" OnValidSubmit="@HandleSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form-group">
                                    <label>New Title</label>

                                    <InputText class="form-control" placeholder="@CurrentThread.Name" @bind-Value="@ThreadUpdate.NewName">

                                    </InputText>
                                </div>
                                <small class="text-muted">Leave empty to not change</small>

                                <div class="form-group">
                                    <label>New Body</label>

                                    <InputTextArea class="form-control" placeholder="@CurrentThread.Messages.First().Message" @bind-Value="@ThreadUpdate.NewBody">

                                    </InputTextArea>
                                    <small>Leave empty to not change</small>
                                </div>
                                <div class="mt-3 d-flex align-content-center">
                                    <button class="btn btn-success" type="submit">Update Thread</button>
                                </div>
                            </EditForm>
                        </div>
                        <div class="col-md-2">
                        </div>
                    </div>
                        </div>
                    }
                    else
                    {
                       <Fora.Client.Pages.Components.Administration.Banned>

                       </Fora.Client.Pages.Components.Administration.Banned> 
                    }
                }
                else
                {
                    <Fora.Client.Pages.Components.Administration.ActivateUser CurrentUser="CurrentUser">

                    </Fora.Client.Pages.Components.Administration.ActivateUser>
                }


}
            else
            {
                <div class="alert alert-danger" role="alert">
                    You are not able to edit this thread. Permission Denied.
                </div>
            }

        }
        else
        {
            <div class="alert alert-danger" role="alert">
                Please log in to edit this thread.
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            This thread does not exist.
        </div>
    }

}


@code {
    [Parameter]
    public string InterestName { get; set; }
    [Parameter]
    public int ThreadId { get; set; }

    InterestModel Interest { get; set; }

    UpdateThreadModel ThreadUpdate { get; set; } = new UpdateThreadModel();

    UserModel CurrentUser { get; set; }

    ThreadModel CurrentThread { get; set; }

    public bool HasPageLoaded { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        var interestResult = await InterestManager.GetInterests();
        Interest = interestResult.Where(i => i.Name.ToLower() == InterestName.ToLower()).FirstOrDefault();
        CurrentThread = await ThreadManager.GetThread(ThreadId);

        if (await LoginManager.IsLoggedIn())
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }

        HasPageLoaded = true;
        StateHasChanged();

    }

    async Task HandleSubmit()
    {
        ThreadUpdate.ThreadId = CurrentThread.Id;
        await ThreadManager.UpdateThread(ThreadUpdate);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"/forum/{InterestName}/{CurrentThread.Id}", forceLoad: true);

    }

}
