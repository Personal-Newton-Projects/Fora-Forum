@page "/forum/{InterestName}/{ThreadId:int}"

@using Components.User;
@using Components.Utilities;
@using Components.Administration;

@inject IThreadManager ThreadManager
@inject IJSRuntime JsRuntime
@inject ILoginManager LoginManager
@inject NavigationManager NavigationManager


@if (HasPageLoaded)
{

    <div class="container-fluid">

        <h2>@ThisThread.Name</h2>
        <hr>
        @foreach (MessageModel message in ThisThread.Messages)

        {

            <div class="row mt-3 p-0">
                <div class="col-sm-2 p-0">
                    <Fora.Client.Pages.Components.User.User CurrentUser="message.User">

                    </Fora.Client.Pages.Components.User.User>
                </div>

                @if (message.UserId == CurrentUser.Id)
                {
                    MessageStyle = "bg-info";
                }
                else
                {
                    MessageStyle = String.Empty;
                }

                <div class="col-sm-8 @MessageStyle border">

                    <div class="m-4">

                        <div class="d-flex ">
                            <div class="flex-grow-1 ms-3">
                                @if (message.Deleted)
                                {
                                    <i>@message.Message</i>
                                }
                                else
                                {
                                    if (EditMessageID == message.Id)
                                    {

                                        <EditForm Model="@UpdateMessage" OnValidSubmit="UpdateMessageInThread">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />
                                            <div class="form-group">
                                                <InputTextArea class="form-control" @bind-Value="UpdateMessage.NewMessage">

                                                </InputTextArea>

                                                <button class="btn btn-success" type="submit">Update Message</button>
                                            </div>
                                        </EditForm>
                                    }
                                    else
                                    {
                                        @message.Message

                                    }

                                }
                            </div>


                            <div class=" pt-5 justify-content-end align-items-end flex-column">
                                <small>Posted @message.PostDate</small>
                                <br />
                                @if (message.Edited)
                                {
                                    
                                    <small><em>Message has been edited</em> @message.EditDate</small>
                                }
                                <hr>
                                @if (CurrentUser.Id == message.User.Id)
                                {
                                    if (message == ThisThread.Messages.First())
                                    {
                                        <div class=" justify-content-end">
                                            <button class="btn btn-link" @onclick="@(() => EditThread())">Edit Thread</button>
                                            <button class="btn btn-link" @onclick="@(() => RemoveThread())">Remove Thread</button>
                                        </div>

                                    }
                                    else if (!message.Deleted)
                                    {
                                        <div class=" justify-content-end">
                                            <button class="btn btn-link" @onclick="@(() => EditMessage(message))">Edit</button>
                                            <button class="btn btn-link" @onclick="@(() => RemoveMessage(message))">Remove</button>
                                        </div>
                                    }

                                }
                                else if (CurrentUser.UserRole.Role.Role == RoleEnum.ADMIN)
                                {
                                    if (message == ThisThread.Messages.First())
                                    {
                                        <div class=" justify-content-end">

                                            <button class="btn btn-link" @onclick="@(() => EditThread())">Edit Thread</button>
                                            <button class="btn btn-link" @onclick="@(() => RemoveThread())">Remove Thread</button>
                                        </div>

                                    }
                                    else if (!message.Deleted)
                                    {
                                        <div class=" justify-content-end">

                                            <button class="btn btn-link" @onclick="@(() => RemoveMessage(message))">Remove</button>
                                        </div>

                                    }
                                }
                            </div>


                        </div>
                    </div>


                </div>
                @if (message == ThisThread.Messages.First())
                {
                    <div class="mb-2" />
                }
            </div>

        }


        <div class="row">
            <div class="col-md-2">
            </div>
            <div class="col-md-8 p-2 text-center">
                <h5>Contribute to the conversation</h5>
                @if (CurrentUser != null)
                {
                    if (!CurrentUser.Deleted)
                    {
                        if (!CurrentUser.Banned)
                        {
                            <button @onclick="StartPost" class="btn btn-primary">Post</button>
                            @if (UserPosting)
                            {
                                <EditForm Model="@PostMessage" OnValidSubmit="PostMessageToThread">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="form-group">
                                        <InputTextArea class="form-control" @bind-Value="PostMessage.Message">

                                        </InputTextArea>

                                        <button class="btn btn-success" type="submit">Post Message</button>
                                    </div>
                                </EditForm>
                            }
                        }
                        else
                        {
                            <Fora.Client.Pages.Components.Administration.Banned></Fora.Client.Pages.Components.Administration.Banned>
                        }

                    }
                    else
                    {
                        <Fora.Client.Pages.Components.Administration.ActivateUser></Fora.Client.Pages.Components.Administration.ActivateUser>
                    }

                }


            </div>
            <div class="col-md-2">
            </div>

        </div>

    </div>
}







@code {

    [Parameter]
    public string InterestName { get; set; }
    [Parameter]
    public int ThreadId { get; set; }


    public PostMessageModel PostMessage { get; set; } = new PostMessageModel();
    public UserModel CurrentUser { get; set; }

    ThreadModel ThisThread { get; set; } = new ThreadModel();
    UserModel ThreadCreator { get; set; }
    UpdateMessageModel UpdateMessage { get; set; } = new UpdateMessageModel();

    public bool HasPageLoaded { get; set; } = false;

    public bool UserPosting { get; set; }

    string MessageStyle { get; set; } = String.Empty;

    int EditMessageID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        await ReloadThread();
        ThreadCreator = ThisThread.User;
        HasPageLoaded = true;


    }


    async Task StartPost()
    {
        UserPosting = true;
        StateHasChanged();
    }

    async Task PostMessageToThread()
    {
        PostMessage.PosterId = CurrentUser.Id;
        PostMessage.ThreadId = ThisThread.Id;
        await ThreadManager.PutMessage(PostMessage);
        UserPosting = false;
        await ReloadThread();
    }

    async Task EditMessage(MessageModel message)
    {
        EditMessageID = message.Id;

        await ReloadThread();
    }

    async Task UpdateMessageInThread()
    {
        UpdateMessage.ThreadId = ThisThread.Id;
        UpdateMessage.MessageId = EditMessageID;
        UpdateMessage.RemoveMessage = false;

        await ThreadManager.UpdateMessage(UpdateMessage);
    }

    async Task RemoveMessage(MessageModel message)
    {
        await ThreadManager.UpdateMessage(
            new UpdateMessageModel()
                {
                    MessageId = message.Id,
                    ThreadId = message.ThreadId,
                    NewMessage = "This post has been removed.",
                    RemoveMessage = true,
                }
        );

        await ReloadThread();

    }

    async Task ReloadThread()
    {
        ThisThread = await ThreadManager.GetThread(ThreadId);
        StateHasChanged();
    }

    async Task EditThread()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri + "/edit", forceLoad: true);
        await ReloadThread();
    }

    async Task RemoveThread()
    {
        await ThreadManager.UpdateThread(new UpdateThreadModel()
            {
                ThreadId = ThisThread.Id,
                RemoveThread = true,
            });

        await ReloadThread();
    }

}
