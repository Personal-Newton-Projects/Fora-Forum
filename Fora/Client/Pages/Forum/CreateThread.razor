@page "/forum/{InterestName}/post"

@inject ILoginManager LoginManager
@inject IInterestManager InterestManager
@inject IThreadManager ThreadManager
@inject NavigationManager NavigationManager

@if (HasPageLoaded == true)
{
    @if (CurrentUser != null)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-2">
                </div>
                <div class="col-md-8">
                    <h5 class="text-center">Create a Thread</h5>
                    <EditForm Model="@ThreadtoCreate" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Title</label>
                            <InputText class="form-control" placeholder="Title" @bind-Value="@ThreadtoCreate.Title">

                            </InputText>
                        </div>


                        <div class="form-group">
                            <label>Body</label>
                            <InputTextArea class="form-control" placeholder="Body" @bind-Value="@ThreadtoCreate.Description">

                            </InputTextArea>
                        </div>
                    <div class="mt-3 d-flex align-content-center">
                        <button class="btn btn-success" type="submit">Create Thread</button>
                    </div>

                    </EditForm>
                </div>
                <div class="col-md-2">
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="alert alert-danger" role="alert">
            Please log in to post a thread.
        </div>
    }

}


@code {
    [Parameter]
    public string InterestName { get; set; }

    InterestModel Interest { get; set; }

    PostThreadModel ThreadtoCreate { get; set; } = new PostThreadModel();

    UserModel CurrentUser { get; set; }

    public bool HasPageLoaded { get; set; } = false;

    //public ThreadModel ThreadtoCreate { get; set; } = new ThreadModel();

    protected override async Task OnInitializedAsync()
    {
        if (await LoginManager.IsLoggedIn())
        {
            CurrentUser = await LoginManager.GetLoggedInUser();

        }
        HasPageLoaded = true;
        StateHasChanged();

    }

    async Task HandleSubmit()
    {

        var interestResult = await InterestManager.GetInterests();
        Interest = interestResult.Where(i => i.Name.ToLower() == InterestName.ToLower()).FirstOrDefault();



        ThreadtoCreate.CreatorId = CurrentUser.Id;
        ThreadtoCreate.InterestId = Interest.Id;

        await ThreadManager.PostThread(ThreadtoCreate);
        var lastThread = await ThreadManager.GetThreads();
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"/forum/{InterestName}/{lastThread.Last().Id}", forceLoad: true);

    }
}



