@inject IInterestManager InterestManager
@inject ILoginManager LoginManager
@inject IUserManager UserManager

<div class="card mb-4">
    <div class="card-header">
        <p>Admin Giver</p>
    </div>
    <div class="card-body">
        @if (DisplayUser.UserRole.Role.Role == RoleEnum.USER)
        {
            <button @onclick="MakeAdmin" class="btn btn-danger">Make @DisplayUser.Username Admin</button>
        }
        else
        {
            <button @onclick="RemoveAdmin" class="btn btn-warning">Remove Admin from @DisplayUser.Username </button>
        }
    </div>
</div>

@code {

    [Parameter]
    public UserModel CurrentUser { get; set; }

    UserModel DisplayUser { get; set; }

    [Parameter]
    public EventCallback UpdateParent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DisplayUser = CurrentUser;
    }

    async Task MakeAdmin()
    {
        await UserManager.UpdateUserRole(new UpdateUserRoleModel()
        {
            UserId = CurrentUser.Id,
            newRoleId = 2
        });

        await ReloadComponent();
    }

    async Task RemoveAdmin()
    {
        await UserManager.UpdateUserRole(new UpdateUserRoleModel()
        {
            UserId = CurrentUser.Id,
            newRoleId = 1
        });

        await ReloadComponent();
    }

    async Task ReloadComponent()
    {
        if (UpdateParent.HasDelegate)
        {
            DisplayUser = await UserManager.GetById(CurrentUser.Id);
            await UpdateParent.InvokeAsync();
            StateHasChanged();
        }
    }

}
