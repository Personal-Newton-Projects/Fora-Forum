@inject IUserManager UserManager

<div class="card mb-4">
    <div class="card-header">
        <p>Account Deletion</p>
    </div>
    <div class="card-body">
        @if (!DisplayUser.Deleted)
        {
            <button @onclick="FlagForDelete" class="btn btn-danger">Flag for Deletion</button>
        }
        else
        {
            <button @onclick="UndoDelete" class="btn btn-warning">Undo Deletion</button>
        }
    </div>
</div>

@code {

    [Parameter]
    public UserModel CurrentUser { get; set; }

    UserModel DisplayUser { get; set; }

    [Parameter]
    public EventCallback UpdateParent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DisplayUser = CurrentUser;
    }

    public async Task FlagForDelete()
    {
        await UserManager.UpdateUser(new PostUserUpdateModel()
            {
                Id = CurrentUser.Id,
                DeleteUser = true,
                BanUser = false
            });

        await ReloadComponent();

    }

    public async Task UndoDelete()
    {

        await UserManager.UpdateUser(new PostUserUpdateModel()
            {
                Id = CurrentUser.Id,
                DeleteUser = false,
                BanUser = false
            });


        await ReloadComponent();
    }

    public async Task ReloadComponent()
    {
        if (UpdateParent.HasDelegate)
        {
            Console.WriteLine($"is User banned? : {CurrentUser.Deleted} ");
            DisplayUser = await UserManager.GetById(CurrentUser.Id);
            await UpdateParent.InvokeAsync();
            Console.WriteLine($"is User banned? : {DisplayUser.Deleted} After new User");
            StateHasChanged();
        }

    }

}
