@inject IUserManager UserManager
@inject ILoginManager LoginManager

@if (PwIsChanged == true)
{
    <p>Password changed to: @ChangedPassword</p>
}
else
{
    <p>@PasswordError</p>
}

<EditForm class="form-group" Model="@UpdateUser" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="form-control" Placeholder="New Password" @bind-Value="@UpdateUser.NewPassword"></InputText>
    <InputText class="form-control" Placeholder="Verify New Password" @bind-Value="@VerifyPassword"></InputText>
    <button type="submit" class="btn btn-primary">Change Password</button>
</EditForm>
@code {
    [Parameter]
    public UserModel User { get; set; } = new();

    [Parameter]
    public UpdateUserInfoModel UpdateUser { get; set; } = new();

    [Parameter]
    public string VerifyPassword { get; set; } //Verify Input Pw
    
    [Parameter]
    public string PasswordError { get; set; } //Pw error message
    
    [Parameter]
    public string ChangedPassword { get; set; } //Holds new password to print in <p></p> that the PW change was an succes

    bool PwIsChanged { get; set; } = false; //Returns true if pw change is successful!
    
    protected override async Task OnInitializedAsync()
    {
        User = await LoginManager.GetLoggedInUser();
    }

    public void HandleSubmit()
    {
        if (VerifyPassword == UpdateUser.NewPassword)
        {
            UpdateUser.Id = User.Id;
            UpdateUser.NewPassword = UpdateUser.NewPassword;
            ChangedPassword = UpdateUser.NewPassword;
            UserManager.UpdateUserPassword(UpdateUser);
            PwIsChanged = true;
            StateHasChanged();
        }
        else
        {
            PasswordError = "Passwords did not match try again!";
            StateHasChanged();
        }
    }
}
