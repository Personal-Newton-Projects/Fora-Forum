@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject ILoginManager LoginManager

<html class="html">

<body class="body">
    @if (HasPageLoaded == true)
    {
        <div class="row" style="background-color:lightgray;">
            <table class="table m-2">
                <thead>
                    <tr>
                        <th>All Interests</th>
                        <th>Options</th>
                    </tr>
                </thead>
                <tbody>
                    @if (CurrentUser.UserInterests != null)
                    {
                        @foreach (var item in InterestsList)
                        {
                            <tr>
                                <td>
                                    @if (IsAdded(item))
                                    {
                                        @item.Name <span style="color: blue">✔</span>
                                    }
                                    else
                                    {
                                        @item.Name
                                    }
                                    @if (item.UserId != null)
                                    {
                                        <span> -- Created By: @item.User.Username</span>
                                    }
                                </td>
                                <td>
                                    @if (IsAdded(item))
                                    {
                                        <button @onclick="@(() => RemoveInterest(item))" class="btn btn-primary" style="background-color:red">Remove</button>
                                    }
                                    else
                                    {
                                        <button type="submit" @onclick="@(() => AddInterest(item))" class="btn btn-primary" style="background-color:green">Add</button>
                                    }
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>
                                Create Interest
                            </td>
                            <td>
                                <Fora.Client.Pages.Components.Utilities.CreateInterest CurrentUser="CurrentUser" UpdateParent="@ReloadInterests" InterestToCreate="InterestToCreate">

                                </Fora.Client.Pages.Components.Utilities.CreateInterest>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <h3 style="text-align: center">Page did not load, perhaps you are not logged in</h3>
    }

</body>
</html>

@code {

    [Parameter]
    public List<InterestModel>? InterestsList { get; set; } = new();

    [Parameter]
    public UserModel CurrentUser { get; set; }

    UserModel DisplayUser { get; set; }

    CreateInterestsModel InterestToCreate { get; set; } = new CreateInterestsModel();

    [Parameter]
    public EventCallback UpdateParent { get; set; }


    public List<PostUserInterestsModel> ChosenInterests { get; set; } = new List<PostUserInterestsModel>();


    public bool HasPageLoaded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        DisplayUser = CurrentUser;

        await ReloadInterests();
        HasPageLoaded = true;
        StateHasChanged();
    }

    async Task ReloadInterests()
    {
        foreach (UserInterestModel userInterest in DisplayUser.UserInterests)
        {
            if (ChosenInterests.Any(c => c.InterestID == userInterest.InterestId)) break;
            ChosenInterests.Add(new PostUserInterestsModel()
                {
                    InterestID = userInterest.InterestId,
                    UserID = userInterest.UserId
                });
        }

        InterestsList = await InterestManager.GetInterests();

        StateHasChanged();
        if(UpdateParent.HasDelegate)
        {
            await UpdateParent.InvokeAsync();
        }
    }

    public async Task AddInterest(InterestModel interest)
    {
        ChosenInterests.Add(new PostUserInterestsModel() { InterestID = interest.Id, UserID = CurrentUser.Id, });
        await SubmitInterest();
    }

    public async Task RemoveInterest(InterestModel interest)
    {
        ChosenInterests.Remove(ChosenInterests.SingleOrDefault(c => c.InterestID == interest.Id));
        await SubmitInterest();
    }

    public async Task SubmitInterest()
    {
        foreach (var item in ChosenInterests)
        {
            Console.WriteLine(item.InterestID);
        }
        await UserManager.UpdateUserInterests(ChosenInterests, DisplayUser.Id);
        await ReloadInterests();
    }

    bool IsAdded(InterestModel interest)
    {
        if (ChosenInterests.SingleOrDefault(c => c.InterestID == interest.Id) != null)
        {
            return true;
        }
        return false;
    }
}