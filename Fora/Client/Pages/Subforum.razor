@page "/forum/{InterestName}"

@inject IInterestManager InterestManager
@inject IThreadManager ThreadManager
@inject ILoginManager LoginManager

@if (HasPageLoaded == true)
{
    @if (CurrentInterest != null)
    {
        <h3>@CurrentInterest.Name Subforum</h3>
        if (CurrentUser != null)
        {
            <h4>Welcome @CurrentUser.Username</h4>
        }
        else
        {
            <h4>Create an account to contribute to the discussion</h4>
        }

        @if (Threads != null)
        {


            <div class="list-group">
                @foreach (ThreadModel thread in Threads)
                {
                    <a href="forum/@InterestName/@thread.Id" class="list-group-item list-group-item-action flex-column align-items-start">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">@thread.Name</h5>
                            <small class="text-muted">Posts: @thread.Messages.Count</small>
                        </div>
                        <p class="mb-1" style="text-overflow: ellipsis">@thread.Messages[0].Message</p>
                        <small class="text-muted">Posted by <a href="/profile/@thread.User.Id">@thread.User.Username</a></small>
                    </a>
                }
            </div>
        }

        if (CurrentUser != null)
        {
            <div class="list-group">
                <a href="/forum/@InterestName/post" class="list-group-item list-group-item-action flex-column align-items-start">
                    <div class="d-flex w-100 justify-content-between">
                        <button class="btn btn-primary">Create Thread</button>
                    </div>

                </a>
            </div>
        }

    }
    else
    {
        <h1>Error, subforum not found!</h1>
        <button class="btn btn-primary" onclick="@Reload">Reload</button>
    }

}




@code {
    [Parameter]
    public string InterestName { get; set; }

    public UserModel? CurrentUser { get; set; }

    InterestModel? CurrentInterest;

    List<ThreadModel> Threads { get; set; }

    public bool HasPageLoaded { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var interestResult = await InterestManager.GetInterests();
        CurrentInterest = interestResult.Where(i => i.Name.ToLower() == InterestName.ToLower()).FirstOrDefault();
        Threads = await ThreadManager.GetThreadsByInterest(CurrentInterest.Id);

        if (await LoginManager.IsLoggedIn())
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        else
        {
            CurrentUser = null;
        }

        HasPageLoaded = true;
        StateHasChanged();
    }

    public void Reload()
    {
        StateHasChanged();
    }
}
