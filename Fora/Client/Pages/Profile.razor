@page "/profile/{CurrentUserId:int}"
@using System.Drawing
@inject IUserManager UserManager
@inject IInterestManager InterestManager
@inject ILoginManager LoginManager

@if (HasPageLoaded)
{
    <div style="text-align:left">
        <h3 style="text-align: center">Welcome @CurrentUser.Username! This is your profile page!</h3>
        <table class="table m-2">
            <thead>
            <tr>
                <th>Account Options</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    @if (!CurrentUser.Deleted)
                    {
                        <button @onclick="FlagForDelete" class="btn btn-danger">Flag for Deletion</button>
                    }
                    else
                    {
                        <button @onclick="UndoDelete" class="btn btn-warning">Undo Deletion</button>
                    }
                </td>
            </tr>
            </tbody>
        </table>
        <Interests CurrentUser="@CurrentUser"></Interests>
        <h3>Account Deletion Status: @CurrentUser.Deleted</h3>
        <div>
            <h3>These are all of your messages!</h3>
            <h4>
                @foreach (var thread in CurrentUser.Threads)
                {
                    @foreach (var item in CurrentUser.Messages)
                    {
                        <p>Message(@item.Id): @item.Message was posted in @thread.Name</p>
                    }
                }
            </h4>
        </div>
    </div>
    
}



@code {
    [Parameter]
    public int CurrentUserId { get; set; }

    public UserModel CurrentUser { get; set; }

    public bool IsMyProfile { get; set; }

    bool HasPageLoaded { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        CurrentUser = await UserManager.GetById(CurrentUserId);
        
        CurrentUser.Threads.Add(new ThreadModel()
        {
            Id = 1,
            Name = "Apocalypse",
            UserId = 1
        });
        
        CurrentUser.Messages.Add(new MessageModel()
        {
            Id = 1,
            Message = "Hej",
            ThreadId = 1,
            UserId = 1
        });
        CurrentUser.Messages.Add(new MessageModel()
        {
            Id = 2,
            Message = "Hejdåre",
            ThreadId = 2,
            UserId = 1
        });

        if (CurrentUser == await LoginManager.GetLoggedInUser())
        {
            IsMyProfile = true;
        }
        else
        {
            IsMyProfile = false;
        }

        HasPageLoaded = true;
        StateHasChanged();
    }

    public async Task FlagForDelete()
    {
        await UserManager.UpdateUser(new PostUserUpdateModel()
            {
                Id = CurrentUser.Id,
                DeleteUser = true,
                BanUser = false
            });
        StateHasChanged();
    }

    public async Task UndoDelete()
    {

        await UserManager.UpdateUser(new PostUserUpdateModel()
            {
                Id = CurrentUser.Id,
                DeleteUser = false,
                BanUser = false
            });
        StateHasChanged();
    }
}