@page "/interests"
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject ILoginManager LoginManager

<table class="table m-2">
    <thead>
    <tr>
        <th>Interest</th>
        <th>Options</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Intresse)
    {
        <tr>            
            <td>        
                @item.Name
            </td>           
            <td>               
                <button type="submit" @onclick="@(() => AddInterest(item))" class="btn btn-primary" style="background-color:green">Add</button>
                <button class="btn btn-primary" style="background-color:red">Remove</button>
            </td>
        </tr>
    }
    </tbody>
</table>
<EditForm Model="CurrentUser" OnSubmit="SubmitInterest">
    <InputRadioGroup @bind-Value="CurrentUser">
        @foreach (var unit in Intresse)
        {
            <InputRadio Value="@unit.Id">@unit.Name</InputRadio>    
        }
    </InputRadioGroup>
</EditForm>

@code {
    [Parameter]
    public List<InterestModel>? Intresse { get; set; } = new();

    [Parameter]
    public UserModel CurrentUser { get; set; } = new();
    
    [Parameter]
    public List<UserInterestModel> ChosenInterest { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        Intresse = await InterestManager.GetInterests();
        CurrentUser = await LoginManager.GetLoggedInUser();
    }

    public async Task AddInterest(InterestModel interest)
    {
        ChosenInterest.Add(new UserInterestModel()
        {
            User = CurrentUser,
            UserId = CurrentUser.Id,
            Interest = interest,
            InterestId = interest.Id
        });
        await SubmitInterest();
    }
    public async Task RemoveInterest(InterestModel interest)
    {
        ChosenInterest.Remove(ChosenInterest.Where(i => i.Interest == interest).FirstOrDefault());
    }
    
    public async Task SubmitInterest()
    {
        CurrentUser.UserInterests = ChosenInterest;
        await UserManager.UpdateUser(CurrentUser);
    }

}