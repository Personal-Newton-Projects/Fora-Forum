@page "/interests"
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject ILoginManager LoginManager

<html class="html">
<head>
    <link rel="stylesheet" href="css/app.css" type="text/css">
</head>
<body class="body">
@if (IsOnline == true)
{
    <div class="row">
        @for (int i = 0; i < 3; i++)
        {
            <div class="col-sm-6 col-md-4" style="text-align: center">
                <div class="card">
                    @if (i < Images.Count)
                    {
                        <img class="img" src="@Images[i].ImageURL" alt="Card image cap">
                    }
                    <div class="card-body">
                        @if (i < Intresse.Count)
                        {
                            <h5 class="card-title">@Intresse[i].Name </h5>
                        }
                        <p class="card-text">
                            @if (i < Redirect.Count)
                            {
                                <a href="@Redirect[i].RedirectToPage" class="btn btn-primary" style="background-color:green">View</a>
                            }
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
<div class="row">
    <table class="table m-2">
        <thead>
        <tr>
            <th>All Interests (Includes User Added)</th>
            <th>Options</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Intresse)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    <button type="submit" @onclick="@(() => AddInterest(item))" class="btn btn-primary" style="background-color:green">Add</button>
                    <button @onclick="@(() => RemoveInterest(item))" class="btn btn-primary" style="background-color:red">Remove</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
    <div class="row">
        <h3>Create your own interest!</h3>
        <EditForm Model="@InterestToCreate" OnSubmit="CreateThisInterest">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <InputText Placeholder="Interest" @bind-Value="InterestToCreate.Name"></InputText>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
}

else
{
    <h3 style="text-align: center">Page did not load, perhaps you are not logged in</h3>
}
</body>
</html>
@code {

    [Parameter]
    public List<InterestModel>? Intresse { get; set; } = new();
    [Parameter]
    public List<PostUserInterestsModel> ChosenInterests { get; set; } = new List<PostUserInterestsModel>();
    [Parameter]
    public UserModel CurrentUser { get; set; }
    [Parameter]
    public CreateInterestsModel InterestToCreate { get; set; } = new();
    [Parameter]
    public List<ImageModel> Images { get; set; } = new();
    [Parameter]
    public List<RedirectToModel> Redirect { get; set; } = new();
    [Parameter]
    public bool IsOnline { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Intresse = await InterestManager.GetInterests();
        if (CurrentUser == null)
        {
            CurrentUser = await LoginManager.GetLoggedInUser();
        }
        if (CurrentUser.Username == CurrentUser.Username)
        {
            IsOnline = true;
        }
        Redirect.Add(new RedirectToModel() {RedirectToPage = "/forum/animals"});
        Redirect.Add(new RedirectToModel() {RedirectToPage = "/forum/gaming"});
        Redirect.Add(new RedirectToModel() {RedirectToPage = "/forum/philosophy"});
        
        Images.Add(new ImageModel() {ImageURL = "images/Animals.jpg"});
        Images.Add(new ImageModel() {ImageURL = "images/gaming.jpg"});
        Images.Add(new ImageModel(){ImageURL = "images/philosophy.jpg"});
    }

    public async Task AddInterest(InterestModel interest)
    {
        ChosenInterests.Add(new PostUserInterestsModel() {InterestID = interest.Id, UserID = CurrentUser.Id,});
        await SubmitInterest();
    }

    public async Task RemoveInterest(InterestModel interest)
    {
        ChosenInterests.Remove(ChosenInterests.Where(i => i.InterestID == interest.Id).FirstOrDefault());
        await SubmitInterest();
    }

    public async Task SubmitInterest()
    {
        foreach (var item in ChosenInterests)
        {
            Console.WriteLine(item.InterestID);
        }
        await UserManager.UpdateUserInterests(ChosenInterests, CurrentUser.Id);
        StateHasChanged();
    }

    public async Task CreateThisInterest()
    {
        InterestToCreate.UserID = CurrentUser.Id;
        await InterestManager.CreateNewInterest(InterestToCreate);
        StateHasChanged();
    }

}