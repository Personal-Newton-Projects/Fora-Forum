@page "/interests"
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject ILoginManager LoginManager

<table class="table m-2">
    <thead>
        <tr>
            <th>Interest</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Intresse)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    <button type="submit" @onclick="@(() => AddInterest(item))" class="btn btn-primary" style="background-color:green">Add</button>
                    <button @onclick="@(() => RemoveInterest(item))" class="btn btn-primary" style="background-color:red">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@if (CurrentUser != null)
{
    if (CurrentUser.UserInterests != null)
    {
        foreach (var item in CurrentUser.UserInterests)
        {
            <p>CurrentUser.UserInterests[@item.InterestId] = </p>
        }
    }

}

@if (ChosenInterest != null)
{
    foreach (var item in ChosenInterest)
    {
        <p>ChosenInterest[@item.InterestId] </p>
    }
}


@code {
    [Parameter]
    public List<InterestModel>? Intresse { get; set; } = new();

    [Parameter]
    public UserModel CurrentUser { get; set; } = new();

    [Parameter]
    public List<UserInterestModel> ChosenInterest { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Intresse = await InterestManager.GetInterests();
        CurrentUser = await LoginManager.GetLoggedInUser();
    }

    public async Task AddInterest(InterestModel interest)
    {
        foreach (UserInterestModel item in ChosenInterest)
        {
            if (item.Interest == interest)
            {
                return;
            }
            if (item.InterestId == interest.Id)
            {
                return;
            }
        }
        ChosenInterest.Add(new UserInterestModel()
            {
                User = CurrentUser,
                UserId = CurrentUser.Id,
                Interest = interest,
                InterestId = interest.Id
            });
        await SubmitInterest();
    }
    public async Task RemoveInterest(InterestModel interest)
    {
        ChosenInterest.Remove(ChosenInterest.Where(i => i.Interest == interest).FirstOrDefault());
        await SubmitInterest();
    }

    public async Task SubmitInterest()
    {
        // CurrentUser.UserInterests = ChosenInterest;
        await UserManager.UpdateUserInterests(CurrentUser, ChosenInterest);
        StateHasChanged();
    }

}