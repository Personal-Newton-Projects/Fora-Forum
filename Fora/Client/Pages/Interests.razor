@page "/interests"
@inject IInterestManager InterestManager
@inject IUserManager UserManager
@inject ILoginManager LoginManager

<table class="table m-2">
    <thead>
        <tr>
            <th>Interest</th>
            <th>Options</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Intresse)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    <button type="submit" @onclick="@(() => AddInterest(item))" class="btn btn-primary" style="background-color:green">Add</button>
                    <button @onclick="@(() => RemoveInterest(item))" class="btn btn-primary" style="background-color:red">Remove</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<EditForm Model="@InterestToCreate" OnSubmit="CreateThisInterest">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputText @bind-Value="InterestToCreate.Name"></InputText>
    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (CurrentUser != null)
{
    if (CurrentUser.UserInterests != null)
    {
        foreach (var item in CurrentUser.UserInterests)
        {
            <p>CurrentUser.UserInterests[@item.InterestId] = </p>
        }
    }

}
@code {
    [Parameter]
    public List<InterestModel>? Intresse { get; set; } = new();
    
    [Parameter]
    public List<PostUserInterestsModel> ChosenInterests { get; set; } = new List<PostUserInterestsModel>();

    [Parameter]
    public UserModel CurrentUser { get; set; }
    
    [Parameter]
    public CreateInterestsModel InterestToCreate { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        
        Intresse = await InterestManager.GetInterests();
        if(CurrentUser == null)
        {
             CurrentUser = await LoginManager.GetLoggedInUser();
        }
    }

    public async Task AddInterest(InterestModel interest)
    {
        ChosenInterests.Add( new PostUserInterestsModel()
        {
            InterestID = interest.Id,
            UserID = CurrentUser.Id,
        });
        await SubmitInterest();
    }
    public async Task RemoveInterest(InterestModel interest)
    {
        ChosenInterests.Remove(ChosenInterests.Where(i => i.InterestID == interest.Id).FirstOrDefault());
        await SubmitInterest();
    }
    
    public async Task SubmitInterest()
    {
        foreach (var item in ChosenInterests)
        {
            Console.WriteLine(item.InterestID);
        }
        await UserManager.UpdateUserInterests(ChosenInterests, CurrentUser.Id);
        StateHasChanged();
    }

    public async Task CreateThisInterest()
    {
        InterestToCreate.UserID = CurrentUser.Id;
        await InterestManager.CreateNewInterest(InterestToCreate);
    }
}