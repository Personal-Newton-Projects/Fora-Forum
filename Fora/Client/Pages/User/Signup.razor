@page "/signup"

@inject IUserManager UserManager
@inject ILoginManager LoginManager
@inject NavigationManager NavigationManager


@if(AlertMessage.Length > 0)
{
    <div class="alert alert-warning">@AlertMessage</div>
}

<EditForm Model="SignupForm" OnSubmit="HandleSubmit"> 
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputText @bind-Value="SignupForm.Username" Placeholder="Username"></InputText>
    <InputText @bind-Value="SignupForm.Password" Placeholder="Password"></InputText>
    <button type="submit" class="btn btn-primary " disabled="@disabled">Submit</button>
</EditForm>
@code {
    [Parameter]
    public LoginModel SignupForm { get; set; } = new();

    public string AlertMessage { get; set; } = String.Empty;

    bool disabled = false;

    public async Task HandleSubmit()
    {
        Console.WriteLine("Submitted");
        //Calls method to
        disabled = true;
        StateHasChanged();
        var CreateResult = await UserManager.Create( //Post UserModel User and LoginModel Login to:
                                                     // POST: /api/user/
            SignupForm // POST: /api/identityuser/
        );

        if(CreateResult == null)
        {
            AlertMessage = "This user already exists!";
            StateHasChanged();
            return;
        }
        Console.WriteLine("passed anyways");
        AlertMessage = "";
        await LoginManager.LogInWithUser(SignupForm);
        NavigationManager.NavigateTo(NavigationManager.BaseUri, forceLoad: true);
    }
}
