@page "/profile/{ProfileUserId:int}"

@using Fora.Client.Pages.Components.Utilities;
@using Fora.Client.Pages.Components.Administration;
@using Fora.Client.Pages.Components.User;

@inject IUserManager UserManager
@inject IInterestManager InterestManager
@inject ILoginManager LoginManager

@if (HasPageLoaded)
{
    <div class="container">
        <div class="row">
            <div class="col-sm-2">
                <User @ref="UserComponent" CurrentUser="@ProfileUser">

                </User>
            </div>
            <div class="col-sm-10">
                <div class="card mb-4">
                    <div class="card-header">Threads by this User</div>
                    <div class="card-body">
                        <div class="mb-3">
                            @foreach (var thread in ProfileUser.Threads)
                            {
                                <div class="border rounded-3">
                                    <a class="text-decoration-none" href="/forum/@thread.Interest.Name/@thread.Id">
                                        <span class="text-info">@thread.Interest.Name:</span> <span class="text-lg-start">@thread.Name</span> | Posts: @thread.Messages.Count
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-2">
            </div>
            <div class="col-sm-8">
                @if (IsMyProfile == true)
                {
                    <div class="card mb-4">
                        <div class="card-header">Account Options</div>
                        <div class="card-body">
                            <DeleteAccount UpdateParent="@ReloadUser" CurrentUser="CurrentUser">

                            </DeleteAccount>
                            <ChangePassword CurrentUser="CurrentUser">

                            </ChangePassword>
                            <div class="card">
                                <div class="card-header">Edit Interests</div>
                                <div class="card-body">
                                    <a class="btn btn-primary" href="/profile/@ProfileUserId/interests">Click here</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (IsAdmin)
                {
                    <div class="card mb-4">
                        <div class="card-header">Admin Options</div>
                        <div class="card-body">
                            <AdminPanel UpdateParent="@ReloadUser" CurrentUser="ProfileUser">

                            </AdminPanel>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProfileUserId { get; set; }

    public UserModel ProfileUser { get; set; }

    public UserModel CurrentUser { get; set; }

    CreateInterestsModel InterestToCreate { get; set; } = new CreateInterestsModel();

    public bool IsMyProfile { get; set; }
    public bool IsAdmin { get; set; }

    bool HasPageLoaded { get; set; } = false;

    User UserComponent;

    protected async override Task OnInitializedAsync()
    {
        await ReloadUserPage();

        CurrentUser = await LoginManager.GetLoggedInUser();
        if (ProfileUser.Id == CurrentUser.Id)
        {
            IsMyProfile = true;
        }
        else
        {
            IsMyProfile = false;
        }

        if (CurrentUser.UserRole.Role.Role == RoleEnum.ADMIN)
        {
            IsAdmin = true;
        }

        Console.WriteLine(ProfileUser == await LoginManager.GetLoggedInUser());
        Console.WriteLine(IsMyProfile);

        HasPageLoaded = true;
        StateHasChanged();
    }



    async Task ReloadUserPage()
    {
        ProfileUser = await UserManager.GetById(ProfileUserId);
        StateHasChanged();
    }

    async Task ReloadUser()
    {
        ProfileUser = await UserManager.GetById(ProfileUserId);
        await UserComponent.ReloadUser();
        StateHasChanged();

    }
}
